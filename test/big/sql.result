#
# A test case for Bug#729758
# "SELECT fails with a disjunct and small LIMIT"
# https://bugs.launchpad.net/tarantool/+bug/729758
#
insert(0, ('Doe', 'Richard'), not_presented = True)
---
 -  ['Doe', 'Richard']
...
insert(0, ('Roe', 'Richard'), not_presented = True)
---
 -  ['Roe', 'Richard']
...
insert(0, ('Woe', 'Richard'), not_presented = True)
---
 -  ['Woe', 'Richard']
...
insert(0, ('Major', 'Tomas'), not_presented = True)
---
 -  ['Major', 'Tomas']
...
insert(0, ('Kytes', 'Tomas'), not_presented = True)
---
 -  ['Kytes', 'Tomas']
...
select(0, ['Richard', 'Tomas', 'Tomas'], index = 1, limit = 5)
---
 -  ['Doe', 'Richard']
 -  ['Kytes', 'Tomas']
 -  ['Major', 'Tomas']
 -  ['Roe', 'Richard']
 -  ['Woe', 'Richard']
...
#
# A test case for Bug#729879
# "Zero limit is treated the same as no limit"
# https://bugs.launchpad.net/tarantool/+bug/729879
#
select(0, ['Richard', 'Tomas'], index = 1, limit = 0)
---
No match
...
delete(0, 'Doe')
---
 -  ['Doe', 'Richard']
...
delete(0, 'Roe')
---
 -  ['Roe', 'Richard']
...
delete(0, 'Woe')
---
 -  ['Woe', 'Richard']
...
delete(0, 'Major')
---
 -  ['Major', 'Tomas']
...
delete(0, 'Kytes')
---
 -  ['Kytes', 'Tomas']
...
#
# A test case for Bug#730593
# "Bad data if incomplete tuple"
# https://bugs.launchpad.net/tarantool/+bug/730593
# Verify that if there is an index on, say, field 2,
# we can't insert tuples with cardinality 1 and
# get away with it.
#
insert(0, ('Britney',), not_presented = True)
---
Error: (2, u'Illegal parameters, tuple must have all indexed fields')
...
select(0, 'Anything', index = 1)
---
No match
...
insert(0, ('Stephanie',), not_presented = True)
---
Error: (2, u'Illegal parameters, tuple must have all indexed fields')
...
select(0, 'Anything', index = 1)
---
No match
...
insert(0, ('Spears', 'Britney'), not_presented = True)
---
 -  ['Spears', 'Britney']
...
select(0, 'Spears', index = 0)
---
 -  ['Spears', 'Britney']
...
select(0, 'Anything', index = 1)
---
No match
...
select(0, 'Britney', index = 1)
---
 -  ['Spears', 'Britney']
...
call('box.select_range', ('0', '0', '100', 'Spears'))
---
 -  ['Spears', 'Britney']
...
call('box.select_range', ('0', '1', '100', 'Britney'))
---
 -  ['Spears', 'Britney']
...
delete(0, 'Spears')
---
 -  ['Spears', 'Britney']
...
#
# Test composite keys with trees
#
insert(1, ('key1', 'part1', 'part2'), not_presented = True)
---
 -  ['key1', 'part1', 'part2']
...
insert(1, ('key1', 'part1', 'part2'))
---
 -  ['key1', 'part1', 'part2']
...
insert(1, ('key2', 'part1', 'part2_a'), not_presented = True)
---
 -  ['key2', 'part1', 'part2_a']
...
insert(1, ('key3', 'part1', 'part2_b'), not_presented = True)
---
 -  ['key3', 'part1', 'part2_b']
...
for k, v in box.space[1]:pairs() do print(v) end
---
846816619: {'part1', 'part2_a'}
863593835: {'part1', 'part2_b'}
830039403: {'part1', 'part2'}
...
select(1, 'key1')
---
 -  ['key1', 'part1', 'part2']
...
select(1, 'key2')
---
 -  ['key2', 'part1', 'part2_a']
...
select(1, 'key3')
---
 -  ['key3', 'part1', 'part2_b']
...
select(1, 'part1', index = 1)
---
 -  ['key1', 'part1', 'part2']
 -  ['key2', 'part1', 'part2_a']
 -  ['key3', 'part1', 'part2_b']
...
call('box.select_range', ('1', '1', '100', 'part1'))
---
 -  ['key1', 'part1', 'part2']
 -  ['key2', 'part1', 'part2_a']
 -  ['key3', 'part1', 'part2_b']
...
call('box.select_range', ('1', '0', '100', 'key2'))
---
 -  ['key1', 'part1', 'part2']
 -  ['key2', 'part1', 'part2_a']
 -  ['key3', 'part1', 'part2_b']
...
call('box.select_range', ('1', '1', '100', 'part1', 'part2_a'))
---
 -  ['key2', 'part1', 'part2_a']
 -  ['key3', 'part1', 'part2_b']
...
insert(5, ('01234567', 'part1', 'part2'), not_presented = True)
---
 -  ['01234567', 'part1', 'part2']
...
insert(5, ('11234567', 'part1', 'part2'), not_presented = True)
---
 -  ['11234567', 'part1', 'part2']
...
insert(5, ('21234567', 'part1', 'part2_a'), not_presented = True)
---
 -  ['21234567', 'part1', 'part2_a']
...
insert(5, ('31234567', 'part1_a', 'part2'), not_presented = True)
---
 -  ['31234567', 'part1_a', 'part2']
...
insert(5, ('41234567', 'part1_a', 'part2_a'), not_presented = True)
---
 -  ['41234567', 'part1_a', 'part2_a']
...
for k, v in box.space[5]:pairs() do print(v) end
---
3978425819141910832: {'part1', 'part2'}
3978425819141910833: {'part1', 'part2'}
3978425819141910834: {'part1', 'part2_a'}
3978425819141910835: {'part1_a', 'part2'}
3978425819141910836: {'part1_a', 'part2_a'}
...
select(5, '01234567')
---
 -  ['01234567', 'part1', 'part2']
...
select(5, '11234567')
---
 -  ['11234567', 'part1', 'part2']
...
select(5, '21234567')
---
 -  ['21234567', 'part1', 'part2_a']
...
select(5, 'part1', index = 1)
---
 -  ['01234567', 'part1', 'part2']
 -  ['11234567', 'part1', 'part2']
 -  ['21234567', 'part1', 'part2_a']
...
select(5, 'part1_a', index = 1)
---
 -  ['31234567', 'part1_a', 'part2']
 -  ['41234567', 'part1_a', 'part2_a']
...
select(5, 'part_none', index = 1)
---
No match
...
call('box.select', ('5', '1', 'part1', 'part2'))
---
 -  ['01234567', 'part1', 'part2']
 -  ['11234567', 'part1', 'part2']
...
insert(7, (1, 'hello'), not_presented = True)
---
 -  ['1', 'hello']
...
insert(7, (2, 'brave'), not_presented = True)
---
 -  ['2', 'brave']
...
insert(7, (3, 'new'), not_presented = True)
---
 -  ['3', 'new']
...
insert(7, (4, 'world'), not_presented = True)
---
 -  ['4', 'world']
...
#
# Bug#929654 - secondary hash index is not built with build_indexes()
#
select(7, 'hello', index = 1)
---
 -  ['1', 'hello']
...
select(7, 'brave', index = 1)
---
 -  ['2', 'brave']
...
select(7, 'new', index = 1)
---
 -  ['3', 'new']
...
select(7, 'world', index = 1)
---
 -  ['4', 'world']
...
box.space[7]:truncate()
---
...
select(1, 'key1')
---
 -  ['key1', 'part1', 'part2']
...
select(1, 'key2')
---
 -  ['key2', 'part1', 'part2_a']
...
select(1, 'key3')
---
 -  ['key3', 'part1', 'part2_b']
...
select(1, 'part1', index = 1)
---
 -  ['key1', 'part1', 'part2']
 -  ['key2', 'part1', 'part2_a']
 -  ['key3', 'part1', 'part2_b']
...
delete(1, 'key1')
---
 -  ['key1', 'part1', 'part2']
...
delete(1, 'key2')
---
 -  ['key2', 'part1', 'part2_a']
...
delete(1, 'key3')
---
 -  ['key3', 'part1', 'part2_b']
...
select(5, 'part1', index = 1)
---
 -  ['01234567', 'part1', 'part2']
 -  ['11234567', 'part1', 'part2']
 -  ['21234567', 'part1', 'part2_a']
...
select(5, 'part2', index = 1)
---
No match
...
delete(5, '01234567')
---
 -  ['01234567', 'part1', 'part2']
...
delete(5, '11234567')
---
 -  ['11234567', 'part1', 'part2']
...
delete(5, '21234567')
---
 -  ['21234567', 'part1', 'part2_a']
...
delete(5, '31234567')
---
 -  ['31234567', 'part1_a', 'part2']
...
delete(5, '41234567')
---
 -  ['41234567', 'part1_a', 'part2_a']
...
for k, v in box.space[5]:pairs() do print(v) end
---
...

#
# A test case for: http://bugs.launchpad.net/bugs/735140
# Partial REPLACE corrupts index.
#

insert(4, ('Spears', 'Britney'), not_presented = True)
---
 -  ['Spears', 'Britney']
...
select(4, 'Spears')
---
 -  ['Spears', 'Britney']
...
select(4, 'Britney', index = 1)
---
 -  ['Spears', 'Britney']
...
insert(4, ('Spears',))
---
Error: (2, u'Illegal parameters, tuple must have all indexed fields')
...
select(4, 'Spears')
---
 -  ['Spears', 'Britney']
...
delete(4, 'Spears')
---
 -  ['Spears', 'Britney']
...
insert(4, (1, 'duplicate one'), not_presented = True)
---
 -  ['1', 'duplicate one']
...
insert(4, (2, 'duplicate one'), not_presented = True)
---
 -  ['2', 'duplicate one']
...
insert(4, (3, 'duplicate one'), not_presented = True)
---
 -  ['3', 'duplicate one']
...
insert(4, (4, 'duplicate one'), not_presented = True)
---
 -  ['4', 'duplicate one']
...
insert(4, (5, 'duplicate one'), not_presented = True)
---
 -  ['5', 'duplicate one']
...
insert(4, (6, 'duplicate two'), not_presented = True)
---
 -  ['6', 'duplicate two']
...
insert(4, (7, 'duplicate two'), not_presented = True)
---
 -  ['7', 'duplicate two']
...
insert(4, (8, 'duplicate two'), not_presented = True)
---
 -  ['8', 'duplicate two']
...
insert(4, (9, 'duplicate two'), not_presented = True)
---
 -  ['9', 'duplicate two']
...
insert(4, (10, 'duplicate two'), not_presented = True)
---
 -  ['10', 'duplicate two']
...
insert(4, (11, 'duplicate three'), not_presented = True)
---
 -  ['11', 'duplicate three']
...
insert(4, (12, 'duplicate three'), not_presented = True)
---
 -  ['12', 'duplicate three']
...
insert(4, (13, 'duplicate three'), not_presented = True)
---
 -  ['13', 'duplicate three']
...
insert(4, (14, 'duplicate three'), not_presented = True)
---
 -  ['14', 'duplicate three']
...
insert(4, (15, 'duplicate three'), not_presented = True)
---
 -  ['15', 'duplicate three']
...
select(4, 'duplicate one', index = 1)
---
 -  ['1', 'duplicate one']
 -  ['2', 'duplicate one']
 -  ['3', 'duplicate one']
 -  ['4', 'duplicate one']
 -  ['5', 'duplicate one']
...
select(4, 'duplicate two', index = 1)
---
 -  ['10', 'duplicate two']
 -  ['6', 'duplicate two']
 -  ['7', 'duplicate two']
 -  ['8', 'duplicate two']
 -  ['9', 'duplicate two']
...
select(4, 'duplicate three', index = 1)
---
 -  ['11', 'duplicate three']
 -  ['12', 'duplicate three']
 -  ['13', 'duplicate three']
 -  ['14', 'duplicate three']
 -  ['15', 'duplicate three']
...
delete(4, 1)
---
 -  ['1', 'duplicate one']
...
delete(4, 2)
---
 -  ['2', 'duplicate one']
...
delete(4, 3)
---
 -  ['3', 'duplicate one']
...
delete(4, 4)
---
 -  ['4', 'duplicate one']
...
delete(4, 5)
---
 -  ['5', 'duplicate one']
...
delete(4, 6)
---
 -  ['6', 'duplicate two']
...
delete(4, 7)
---
 -  ['7', 'duplicate two']
...
delete(4, 8)
---
 -  ['8', 'duplicate two']
...
delete(4, 9)
---
 -  ['9', 'duplicate two']
...
delete(4, 10)
---
 -  ['10', 'duplicate two']
...
delete(4, 11)
---
 -  ['11', 'duplicate three']
...
delete(4, 12)
---
 -  ['12', 'duplicate three']
...
delete(4, 13)
---
 -  ['13', 'duplicate three']
...
delete(4, 14)
---
 -  ['14', 'duplicate three']
...
delete(4, 15)
---
 -  ['15', 'duplicate three']
...
insert(4, (1, 'Aardvark '), not_presented = True)
---
 -  ['1', 'Aardvark ']
...
insert(4, (2, 'Bilimbi'), not_presented = True)
---
 -  ['2', 'Bilimbi']
...
insert(4, (3, 'Creature '), not_presented = True)
---
 -  ['3', 'Creature ']
...
for k, v in box.space[4]:pairs() do print(v) end
---
'3': {'Creature '}
'2': {'Bilimbi'}
'1': {'Aardvark '}
...
box.space[4].index[0].idx:min()
---
error: 'HASH does not support min()'
...
box.space[4].index[0].idx:max()
---
error: 'HASH does not support max()'
...
box.space[4].index[1].idx:min()
---
 - '1': {'Aardvark '}
...
box.space[4].index[1].idx:max()
---
 - '3': {'Creature '}
...
delete(4, 1)
---
 -  ['1', 'Aardvark ']
...
delete(4, 2)
---
 -  ['2', 'Bilimbi']
...
delete(4, 3)
---
 -  ['3', 'Creature ']
...
